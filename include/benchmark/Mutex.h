////////////////////////////////////////////////////////////////////////////////
/// DISCLAIMER
///
/// Copyright 2014-2016 ArangoDB GmbH, Cologne, Germany
/// Copyright 2004-2014 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is ArangoDB GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Achim Brandt
////////////////////////////////////////////////////////////////////////////////

#ifndef ROCKSDB_BENCHMARK_MUTEX_H
#define ROCKSDB_BENCHMARK_MUTEX_H 1

#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>

namespace benchmark {

////////////////////////////////////////////////////////////////////////////////
/// @brief mutex
////////////////////////////////////////////////////////////////////////////////

class Mutex {
 private:
  Mutex(Mutex const&) = delete;
  Mutex& operator=(Mutex const&) = delete;

 public:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief constructs a mutex
  //////////////////////////////////////////////////////////////////////////////

  Mutex();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief deletes the mutex
  //////////////////////////////////////////////////////////////////////////////

  ~Mutex();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief acquires the lock
  //////////////////////////////////////////////////////////////////////////////

  void lock();

  //////////////////////////////////////////////////////////////////////////////
  /// @brief releases the lock
  //////////////////////////////////////////////////////////////////////////////

  void unlock();

 private:
  //////////////////////////////////////////////////////////////////////////////
  /// @brief pthread mutex
  //////////////////////////////////////////////////////////////////////////////

  pthread_mutex_t _mutex;
};
}

#endif
